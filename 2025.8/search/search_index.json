{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Appium Inspector documentation! The Inspector is a GUI assistant tool for Appium, providing visual inspection of the application under test (screenshots and page sources), with features such as interacting with the app screenshot, searching for and interacting with elements, executing driver actions, recording user actions, and more!</p> <p>Appium Inspector is part of the Appium ecosystem. For information on Appium itself, please visit the Appium documentation.</p>"},{"location":"#explore-the-documentation","title":"Explore the Documentation","text":"<ul> <li>Check out the Overview to learn the basics of the Inspector</li> <li>Go through the Quickstart steps to get set up and start inspecting your app</li> <li>The Menu Bar section acts as a reference for the application menu bar</li> <li>The Session Builder section acts as a reference for the default landing screen</li> <li>The Session Inspector section acts as a reference for the inspector screen</li> <li>Refer to the Troubleshooting page for a list of potential issues</li> <li>For contributions to the Inspector, refer to the Contributing page</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Want to contribute to this app? We'd love it!</p>"},{"location":"contributing/#code","title":"Code","text":"<p>The application is primarily built using React, with the desktop app version being based on Electron.</p> <p>To start off, clone the project from GitHub and run:</p> <pre><code>npm ci\n</code></pre> <p>Note</p> <p>There are some possible requirements prior to the install due to <code>node-gyp</code>:</p> <ul> <li>Python</li> <li>some C/C++ compiler tools matching your operating system</li> </ul> <p>Run in development mode:</p> <pre><code>npm run dev:browser  # same as the plugin version\nnpm run dev:electron\n</code></pre> <p>Tip</p> <p>Development mode runs in a separate dev server, so all Inspector sessions are subject to cross-origin resource sharing (CORS) issues. In order to avoid this, before requesting a new session in dev mode, ensure your Appium server has been launched with the <code>--allow-cors</code> flag.</p> <p>Run tests:</p> <pre><code>npm run test:lint\nnpm run test:format\nnpm run test:unit\nnpm run test:integration\nnpm run test:e2e\n\nnpm run test # lint, unit &amp; integration\n</code></pre> <p>Build the production version:</p> <pre><code>npm run build:browser  # output directory: /dist-browser\nnpm run build:plugin   # output directory: /plugins/dist-browser\nnpm run build:electron # output directory: /dist\n</code></pre> <p>Build the production version and run it:</p> <pre><code>npm run preview:browser\nnpm run preview:plugin\nnpm run preview:electron\n</code></pre> <p>Build the desktop app executable package (and other artifacts) for your platform into <code>/release</code>:</p> <p>Note</p> <p>For macOS, this requires code signing environment variables to be set.</p> <pre><code>npm run pack:electron\n</code></pre> <p>Link the plugin version to your local Appium server:</p> <pre><code>cd plugins &amp;&amp; npm install &amp;&amp; cd ..           # install @appium/base-plugin\nappium plugin install --source=local plugins # link the plugin to Appium\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation for this app is built using Appium's own <code>docutils</code>, which is based on MkDocs.</p> <p>To start off, clone the project from GitHub and install it as described in the Code section. Then you can build the documentation:</p> <pre><code>npm run install-docs-deps # install the dependencies (Python packages)\nnpm run dev:docs          # serve the docs locally and watch for changes\n</code></pre>"},{"location":"contributing/#localization","title":"Localization","text":"<p>The Inspector code tries to use only localized strings (<code>t('localizationKey')</code>), which are synchronized with Crowdin. If you would like to contribute translations, please leave your suggestions on Crowdin.</p> <p>If you find yourself needing to add completely new strings, first you need to make code changes that add the strings in the English translation file. After your changes are merged, the new strings will be automatically added to Crowdin, and become available for translation into other languages.</p>"},{"location":"menu-bar/","title":"Menu Bar","text":"<p>The Menu Bar is the always shown either at the top of the application window (Windows) or in the system menu bar (macOS).</p> <p></p> <p>Note</p> <p>The menu bar is not available in the web app version of the Inspector.</p> <p>Several standard menu bar options are included, mainly related to window and text management. However, there are a few specific options as well:</p>"},{"location":"menu-bar/#update-checker","title":"Update Checker","text":"<p>The update checker is available under the File menu (Windows/Linux) or the application menu (macOS). It can be used to check if there is a newer version of the Inspector available, and if so, it is possible to automatically download and install the latest version.</p> <p>Updating is supported for the following application formats:</p> <ul> <li>macOS: <code>.dmg</code></li> <li>Windows: <code>.exe</code> installer</li> <li>Linux: <code>.AppImage</code></li> </ul>"},{"location":"menu-bar/#opensave-session","title":"Open/Save Session","text":"<p>The Open Session File / Save As options in the File menu provides the ability to import and export session details. Only one set of session details can be imported/exported at a time.</p>"},{"location":"menu-bar/#exporting-sessions","title":"Exporting Sessions","text":"<p>Selecting the Save As option will package the currently specified server and session details into a downloadable <code>.appiumsession</code> file, which can then be shared to other computers.</p>"},{"location":"menu-bar/#importing-sessions","title":"Importing Sessions","text":"<p>Selecting the Open Session File option will load the server and session details in the Session Builder. The loaded information can then be modified and/or saved inside the Inspector.</p>"},{"location":"menu-bar/#change-language","title":"Change Language","text":"<p>The Language option in the View menu allows to change the entire application language. Currently there are over 20 available languages with community-provided translations!</p> <p>Note</p> <p>Most languages only include partial translations. You can help by providing your translations on Crowdin!</p>"},{"location":"overview/","title":"Overview","text":"<p>The main purpose of the Inspector is to provide inspection capabilities for the application page source. It is primarily intended to be used in test automation development, but it can also be useful in app development - or if one simply wants to take a look at an application's page source!</p> <p>Under the hood, the Inspector is essentially just an Appium client (based on WebdriverIO), with a graphical user interface and additional features.</p>"},{"location":"overview/#formats","title":"Formats","text":"<p>The Inspector is distributed in 3 formats:</p> <ul> <li>Standalone desktop application for Windows, macOS, and Linux, available for download from   its GitHub repo</li> <li>Web application, available at https://inspector.appiumpro.com</li> <li>Appium server plugin, available for installation using   Appium's Extension CLI</li> </ul> <p>Note that the web application may not be fully up-to-date with the desktop application.</p>"},{"location":"overview/#gui-overview","title":"GUI Overview","text":"<p>There are two main parts to the Inspector user interface:</p> <ul> <li> <p>The Session Builder    The default screen, where all the server and session details must be specified.</p> </li> <li> <p>The Session Inspector    The active session screen, showing the app screenshot, page source, and more.</p> </li> </ul>"},{"location":"overview/#features-overview","title":"Features Overview","text":"<p>In addition to page source and screenshot inspection, the Inspector provides many other useful features. Here is a non-exhaustive list of such features:</p> <ul> <li>Easily define Appium server connection details and capabilities</li> <li>Save server details and capability sets for future sessions</li> <li>Connect to 10+ different cloud platforms</li> <li>Attach to an existing Appium session</li> <li>Interact with the application through its screenshot (click/tap, swipe)</li> <li>Create and save custom gestures</li> <li>Select elements directly through the application screenshot</li> <li>Search for elements using supported locator strategies and your own selectors</li> <li>Interact with elements (click/tap, send keys, clear)</li> <li>View suggested element locator strategies and selectors to be used in your scripts</li> <li>Compare the speed of different element finding strategies</li> <li>Record your actions directly into Appium client code for 5+ different programming languages</li> <li>Simulate system actions for iOS (home, Siri) and Android (back, home, app switch)</li> <li>Switch to different application contexts</li> <li>Access a library of various Appium driver commands</li> </ul> <p>All features are described in detail in the Session Builder and Session Inspector sections.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page aims to act as a reference for issues that may be encountered when using the Inspector.</p>"},{"location":"troubleshooting/#cannot-open-the-app-after-installation","title":"Cannot open the app after installation","text":"<p>Please refer to the Installation guide.</p>"},{"location":"troubleshooting/#cannot-start-a-session-using-browser-inspector","title":"Cannot start a session using browser Inspector","text":"<p>The reason for this issue is cross-origin resource sharing (CORS). Web browsers have security features which prevent CORS. The browser version of the Inspector needs to make requests to the Appium server directly from the browser via JavaScript, but these requests are typically not made to the same host (for example, the Inspector is accessed at <code>appiumpro.com</code>, whereas your local Appium server is <code>localhost:4723</code>).</p> <p>In this scenario, you will be unable to start a session, because the browser will prevent it. You can resolve this issue by starting your Appium server with the <code>--allow-cors</code> flag:</p> <pre><code>appium --allow-cors\n</code></pre> <p>This will instruct the server to sent the correct CORS-related headers, and it should be possible to create a session.</p> <p>Note</p> <p>If you encounter this issue with a cloud provider, the fix must be applied on the provider side, because they are the ones hosting the Appium server.</p>"},{"location":"troubleshooting/#start-session-button-is-cut-off","title":"Start Session button is cut off","text":"<p>This problem may appear if your computer screen size is too small. Check the System Requirements for more details.</p>"},{"location":"troubleshooting/#cannot-see-full-source-tree-with-xcuitest-driver-react-native-app","title":"Cannot see full source tree with XCUITest driver + React Native app","text":"<p>This is a known issue. The problem is caused by Apple's XCTest framework, so unfortunately it cannot be resolved from the Appium side. However, there are a few suggestions that may help mitigate this:</p> <ul> <li>Set the <code>snapshotMaxDepth</code> setting   to <code>62</code> (the maximum stable value)</li> <li>Configure the <code>pageSourceExcludedAttributes</code> setting   to exclude some attributes that you may find less relevant (e.g. <code>\"visible,accessible\"</code>)</li> <li>Set the <code>customSnapshotTimeout</code> setting   to a higher value</li> </ul> <p>If these do not help, then the only remaining solution is to work with the app developers to refactor the application code. Some suggestions from the linked issue thread include:</p> <ul> <li>Try to remove unnecessary nesting levels</li> <li>Use the Fabric renderer with View Flattening</li> <li>Use native stack navigator instead of stack navigator</li> <li>Reduce the amount of view tags/test IDs</li> </ul>"},{"location":"quickstart/","title":"Quickstart Intro","text":"<p>Let's get started with Appium Inspector! Make sure you have checked out the Overview to understand the Inspector basics.</p> <p>This quickstart will cover the following:</p> <ol> <li>Appium Inspector install requirements</li> <li>Installing the Inspector</li> <li>Configure Appium session details</li> <li>Start an Inspector session</li> </ol> <p>Continue with the system requirements!</p>"},{"location":"quickstart/installation/","title":"Installation","text":"<p>This step is only relevant if using the Inspector desktop app or Appium plugin formats.</p>"},{"location":"quickstart/installation/#appium-plugin","title":"Appium Plugin","text":"<p>Like all Appium plugins, the Inspector plugin can be installed and activated using the Appium command line.</p> <ol> <li> <p>Install the plugin:</p> <ol> <li> <p>For Appium 3:</p> <pre><code>appium plugin install inspector\n</code></pre> </li> <li> <p>For Appium 2 (last compatible version):</p> <pre><code>appium plugin install --source=npm appium-inspector-plugin@2025.7.3\n</code></pre> </li> </ol> </li> <li> <p>Launch the Appium server with the plugin activated:</p> <pre><code>appium --use-plugins=inspector --allow-cors\n</code></pre> </li> <li> <p>Open the Inspector URL in your web browser:     <pre><code>http://localhost:4723/inspector\n</code></pre></p> </li> </ol> <p>Info</p> <p>Make sure the above host URL and port match those of the Appium server. The server's base path value is irrelevant, as the plugin always uses the <code>/inspector</code> path.</p>"},{"location":"quickstart/installation/#desktop-app","title":"Desktop App","text":"<p>The app can be downloaded from the Inspector's GitHub repository. Different file formats are provided for each supported platform. In addition to manual downloads, there are also unofficial ways to install the app using the command line.</p>"},{"location":"quickstart/installation/#windows","title":"Windows","text":""},{"location":"quickstart/installation/#manual-download","title":"Manual Download","text":"<p>It is recommended to download the <code>.exe</code> installer file, as it supports checking for updates.</p> <p>Since the app is currently not signed, Windows will show a security warning to prevent you from opening the installer file. This can be bypassed with sufficient user permissions:</p> Handling installation warnings on Windows <ol> <li>Right-click on the installer file and click Properties - a new window should open.</li> <li>Near the bottom of the window, there will be an Unblock checkbox - check it.</li> <li>Click OK.</li> <li>You should now be able to open the installer without issues.</li> </ol> <p>Alternatively, you can also bypass this after having opened the installer:</p> <ol> <li>Upon opening the installer, the following warning will likely be shown.    </li> <li>Click More info - a new button Run anyway should appear at the bottom.</li> <li>Click Run anyway - the installer window should open.</li> </ol> <p>After following the installer steps, the Inspector app should be installed, and you should be able to open it without any warnings.</p>"},{"location":"quickstart/installation/#winget","title":"WinGet","text":"<p>It is possible to install the Inspector through WinGet. Please note that this method is only community-supported, and is not maintained by the Appium team.</p> <pre><code>winget install AppiumDevelopers.AppiumInspector\n</code></pre>"},{"location":"quickstart/installation/#macos","title":"macOS","text":""},{"location":"quickstart/installation/#manual-download_1","title":"Manual Download","text":"<p>It is recommended to download the <code>.dmg</code> installer file, as it supports checking for updates.</p> <p>Opening the file will open a simple window, showing icons for the Inspector and the Applications folder. Drag-and-drop the Inspector icon over the Applications icon to extract the app.</p> <p>Since the app is currently not notarized, macOS will show various security warnings to prevent you from opening the app for the first time. These can be handled as described below:</p> Handling first-time warnings via command-line (any macOS) <p>Simply open your Terminal app and run the following command:</p> <pre><code>xattr -cr \"/Applications/Appium Inspector.app\"\n</code></pre> <p>You should now be able to open the app with no warnings.</p> Handling first-time warnings via GUI (macOS Sequoia or later) <p>Note</p> <p>If your Mac has an Apple chip, you can skip these steps by installing Appium Inspector v2024.9.1 (which should not show any warnings), then using the update checker to upgrade to the most recent version.</p> <ol> <li>Upon opening the app, the following warning will be shown. Click Done.    </li> <li>Open macOS Settings -&gt; Privacy &amp; Security, then scroll down to the Security section. You should see the info text \"Appium Inspector\" was blocked to protect your Mac.</li> <li>Click Open Anyway.</li> <li>A prompt should appear - click Open Anyway again.</li> <li>A prompt should appear, requiring you to confirm the action using administrator user credentials.</li> <li>After confirming the action, the app should open.</li> </ol> Handling first-time warnings via GUI (macOS Sonoma or earlier) <ol> <li>Upon opening the app, the following warning will be shown. Click OK.    </li> <li>Open Finder -&gt; Applications and find Appium Inspector.</li> <li>Control+Click/click with two fingers on Appium Inspector and click Open.</li> <li>A prompt should appear - click Open again.</li> <li>After accepting the prompt, the app should open.</li> </ol>"},{"location":"quickstart/installation/#homebrew","title":"Homebrew","text":"<p>It is possible to install the Inspector through Homebrew. Please note that this method is only community-supported, and is not maintained by the Appium team.</p> <p>Warning</p> <p>This method is deprecated and will be disabled on September 1st, 2026, since the app is not notarized.</p> <pre><code>brew install --cask appium-inspector\n</code></pre>"},{"location":"quickstart/installation/#linux","title":"Linux","text":"<p>It is recommended to download the <code>.AppImage</code> file, as it supports checking for updates.</p> <p>In order to open the file, its executable flag needs to be set first:</p> <pre><code>chmod a+x Appium-Inspector-&lt;version&gt;-linux-&lt;arch&gt;.AppImage\n</code></pre> <p>Afterwards, the app can be opened through the command line:</p> <pre><code>./Appium-Inspector-&lt;version&gt;-linux-&lt;arch&gt;.AppImage\n</code></pre>"},{"location":"quickstart/requirements/","title":"System Requirements","text":"<p>Since the Inspector is released in 3 versions, the requirements for these will differ:</p> <ul> <li>Desktop app<ul> <li>Works on Windows 10+, macOS 11+, Ubuntu 18.04+, Debian 10+, openSUSE 15.5+, or Fedora Linux 39+<ul> <li>These requirements are taken from Chrome,   as the Inspector is built using Electron (which uses Chromium)</li> </ul> </li> <li>Up to around 600MB of free space is required</li> <li>The minimum application window size is 890 x 710 pixels</li> </ul> </li> <li>Web app/Appium server plugin<ul> <li>Works in Chrome/Edge/Firefox/Safari, released in 2022 or later</li> <li>The plugin version requires around 9MB of free space</li> <li>Viewport size of at least 870 x 610 pixels is recommended</li> </ul> </li> </ul>"},{"location":"quickstart/requirements/#appium-server-requirements","title":"Appium Server Requirements","text":"<p>The Inspector cannot do much without an Appium server to connect to. Unless you only want to connect to existing Appium servers, you will need to install and set up a server of your own, which can be hosted either locally or remotely. For instructions on how to do this, please refer to the Appium documentation.</p> <p>If setting up your own server, make sure to also install the Appium driver(s) for your target platform(s). You can find links to all known drivers in the Appium documentation's Ecosystem page. Refer to each driver's documentation for its specific requirements and setup instructions.</p> <p>The following driver versions are recommended for best compatibility:</p> <ul> <li>Espresso: <code>2.23.0</code> or later</li> <li>UiAutomator2: <code>2.21.0</code> or later</li> <li>XCUITest: <code>3.38.0</code> or later</li> </ul> <p>Continue with the Installation steps, or jump directly to Starting a Session!</p>"},{"location":"quickstart/starting-a-session/","title":"Configuring and Starting a Session","text":"<p>Now that the Inspector is installed (if necessary) and opened, you should be greeted with a screen like this:</p> <p></p> <p>This is the Session Builder screen, where the server and session details are specified.</p>"},{"location":"quickstart/starting-a-session/#adding-server-details","title":"Adding Server Details","text":"<p>The server details section at the top of the window is where information about the Appium server is specified, so that the Inspector knows how to connect to it:</p> <ul> <li> <p>If you wish to connect to a cloud provider service, choose your vendor using the Select Cloud   Providers button, switch to its tab, and fill in the required details.</p> </li> <li> <p>If you wish to connect to a standalone local or remote Appium server, first make sure the server   is launched and running. The start of the server log will have a list of IP addresses and ports   that can be used to connect to the server.</p> <ul> <li> <p>For a local Appium server running on its default port, all server details fields can be left   unchanged. By default, the Inspector will attempt to connect to <code>http://127.0.0.1:4723</code>,   which matches the default values of the Appium server.</p> </li> <li> <p>For a local or remote Appium server with non-default properties, please change the field   values accordingly.</p> </li> </ul> </li> </ul> <p>With the server details specified, you can move on to the session details!</p>"},{"location":"quickstart/starting-a-session/#adding-session-details","title":"Adding Session Details","text":"<p>The Capability Builder take up the majority of the Session Builder screen. This is the place where your session Capabilities should be specified.</p> <p>Warning</p> <p>Appium has several mandatory capabilities (see above link). Attempting to start a new session without any capabilities will not work.</p> <p>You can enter these capabilities one by one on the left side, or you can edit the whole capability set in JSON format on the right. Choose your preferred input method.</p> <p>So then, what capabilities should be entered? This depends on your target platform, and the Appium driver that you want to use. Here are some basic capability sets not specific to any app:</p> UiAutomator2XCUITestMac2 <pre><code>{\n  \"platformName\": \"Android\",\n  \"appium:automationName\": \"UiAutomator2\"\n}\n</code></pre> <p>Refer to the UiAutomator2 driver capabilities documentation for more details.</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:udid\": \"&lt;device udid&gt;\"\n}\n</code></pre> <p>Refer to the XCUITest driver capabilities documentation for more details.</p> <pre><code>{\n  \"platformName\": \"Mac\",\n  \"appium:automationName\": \"Mac2\"\n}\n</code></pre> <p>Refer to the Mac2 driver capabilities documentation for more details.</p> <p>Now that the capabilities are set, the session can be launched!</p>"},{"location":"quickstart/starting-a-session/#launching-the-session","title":"Launching the Session","text":"<p>For a final check, here is an example image of a Session Builder with fully configured server and session information:</p> <p></p> <p>You can see the following details:</p> <ul> <li>The server details are unchanged, which means the Inspector will try to connect to a local Appium   server on its default port</li> <li>The session capabilities are set to use the UiAutomator2 driver, with additional capabilities for   the Android system settings app</li> </ul> <p>Of course, your own server and session details will likely vary.</p> <p>You can now press the blue Start Session button - hopefully your session will be created, in which case the Session Inspector screen will open:</p> <p></p> <p>If this works, you are done with the quickstart! You can now start exploring your app using the various features described in the Session Inspector page.</p> <p>If something went wrong, please check the Troubleshooting page for potential issues.</p>"},{"location":"session-builder/","title":"Session Builder Overview","text":"<p>The Session Builder is the default screen shown upon opening the Inspector.</p> <p></p> <p>The user interface here can be divided into several groups:</p> <ul> <li>Application Settings</li> <li>Configuration of Server Details</li> <li>Capability Builder tab</li> <li>Saved Capability Sets tab</li> <li>Attaching to Existing Session tab</li> </ul>"},{"location":"session-builder/app-settings/","title":"Application Settings","text":"<p>The application settings can be accessed using the button in the top-right of the Session Builder screen.</p> <p></p> <p>The only currently available option is the ability to change the application theme. By default, the Inspector will match the system theme, but it is also possible to explicitly switch to a light or dark theme.</p>"},{"location":"session-builder/attach-to-session/","title":"Attach to Session Tab","text":"<p>The Attach to Session tab of the Session Builder provides the ability to connect to an existing Appium session using the Inspector.</p> <p></p> <p>The Inspector will automatically try to discover existing sessions when the Attach to Session tab is opened. The dropdown can then be opened to list all the discovered sessions and their details:</p> <p></p> <p>The most recently created sessions will be shown at the top of the list. If exactly one session is discovered, the dropdown will also auto-populate with the details of that session.</p> <p>Additionally, a refresh button is available to retry the session discovery process.</p> <p>Tip</p> <p>The session discovery process uses the current server details. Make sure to select the correct server tab and enter the expected server details before selecting the Attach to Server tab or pressing the refresh button.</p> <p>Warning</p> <p>Discovering sessions from servers running Appium 3 or later requires the server to have enabled the <code>session_discovery</code> insecure feature.</p> <p>Info</p> <p>Support for discovering sessions from cloud provider-hosted servers depends on the provider. If the Inspector does not discover any sessions for your cloud provider, contact them to check whether they support this functionality.</p> <p>The footer of this screen contains a link the Appium documentation, and a single button for connecting to the selected session.</p>"},{"location":"session-builder/capability-builder/","title":"Capability Builder Tab","text":"<p>Most of the Session Builder screen is taken up by one of 3 tabs, of which the Capability Builder tab is selected by default. As the name implies, this is the place where capabilities for the Inspector session must be specified.</p> <p>To learn more about capabilities, please visit the Appium documentation.</p> <p></p> <p>The divider line in the middle of the tab can be used to collapse/expand either half of this tab.</p>"},{"location":"session-builder/capability-builder/#capability-fields","title":"Capability Fields","text":"<p>The left side of the Capability Builder shows the capability fields editor. It provides several form fields for specifying each capability in parts: its name, value type, and the value itself.</p> <p></p> <p>Changing the name or value of any capability will automatically adjust the contents of the JSON structure on the right side of the Session Builder.</p> <p>There are 4 options for the value type:</p> <ul> <li>text</li> <li>boolean</li> <li>number</li> <li>JSON object</li> </ul> <p>Selecting a different option may change the value input field.</p> <p>Note</p> <p>Capabilities with nested objects, such as <code>chrome:options</code>, must be added by directly editing the the JSON structure.</p> <p>To add or remove capabilities, use the add and delete buttons on the right side.</p> <p>The checkbox next to the delete button can also be used to enable/disable the capability, which may be useful when testing session behavior with/without specific capabilities.</p> <p>Finally, below the list of capabilites there is a checkbox that allows automatically adding the Appium vendor prefix to capabilities that do not have them, when starting a new session. This means that if you have a non-W3C capability without a vendor prefix (e.g. <code>deviceName</code>), the Inspector will automatically add the <code>appium:</code> prefix to it when starting the session (e.g. <code>appium:deviceName</code>). This checkbox is checked by default.</p>"},{"location":"session-builder/capability-builder/#capability-json-structure","title":"Capability JSON Structure","text":"<p>The right side of the Session Builder also shows the current capabilities, but in the standard JSON format, which may be more useful when working with code.</p> <p></p> <p>At the top right of the JSON structure, there is an Edit button, which allows adjusting the capabilities by directly editing the JSON structure. Toggling this editor mode then shows buttons for discarding any changes, or saving them. After saving, any changes will also be reflected in the capability fields on the left side of the Session Builder.</p> <p>In order to assist with editing raw JSON, when attempting to save any changes, they are automatically validated and rejected if they do not fit the JSON syntax:</p> <p></p>"},{"location":"session-builder/capability-builder/#footer","title":"Footer","text":"<p>The Session Builder footer also contains a few items:</p> <p></p> <ul> <li>The Capabilities Documentation link opens the Appium documentation on capabilities</li> <li>The Save As button allows saving the current capabilities as a new capability set for future use   (see Saved Capability Sets for more details)</li> <li>The Start Session button attempts to start an Inspector session using the current capabilities</li> </ul>"},{"location":"session-builder/saved-capability-sets/","title":"Saved Capability Sets Tab","text":"<p>The Saved Capability Sets tab of the Session Builder is used for listing and configuring any saved capability sets, which can be created using the button in the footer of the Capability Builder tab. Parts of this tab are similar to the Capability Builder tab.</p> <p></p> <p>The divider line in the middle of the tab can be used to adjust the widths of both halves of this tab, as well as collapse/expand the right half.</p>"},{"location":"session-builder/saved-capability-sets/#list-of-saved-capability-sets","title":"List of Saved Capability Sets","text":"<p>The left side of this screen contains a list of all saved capability sets. The number of saved sets is also shown in the title of the Saved Capability Sets tab.</p> <p></p> <p>Selecting any set populates the JSON structure on the right side with the contents of the set. There are also 2 buttons: one for opening the set in the Capability Builder tab, and one for deleting the set.</p>"},{"location":"session-builder/saved-capability-sets/#saved-capability-set-json-structure","title":"Saved Capability Set JSON Structure","text":"<p>The JSON structure on the right side shows the capabilities of the saved set in JSON format, exactly like in the Capability Builder tab. One additional functionality here is the ability to rename a saved set:</p> <p></p>"},{"location":"session-builder/saved-capability-sets/#footer","title":"Footer","text":"<p>The footer is largely similar to that in the Capability Builder tab, with one additional button:</p> <ul> <li>The Save button is shown upon selecting any saved capability set, and is enabled after making   any changes in its capabilities. Pressing it overwrites the capabilities in the saved set with the   new changes.</li> </ul>"},{"location":"session-builder/server-details/","title":"Server Details","text":"<p>The top of the Session Builder screen is used to configure server details - that is, how the Inspector should connect to the target Appium server.</p> <p></p> <p>By default, the Appium Server tab is selected, which is used for connecting to a standalone local or remote Appium server. However, it is also possible to connect to a server provided by a cloud service. See the section below for more details.</p>"},{"location":"session-builder/server-details/#default-server-detail-fields","title":"Default Server Detail Fields","text":"<p>The default server details have 4 fields:</p> <p></p> <ul> <li>Remote Host: the host URL of the server (default: <code>127.0.0.1</code>)</li> <li>Remote Port: the port on which the server is running (default: <code>4723</code>)</li> <li>Remote Path: the base path used to access the server (default: <code>/</code>)</li> <li>SSL: whether HTTPS should be used when connecting to the server (default: <code>false</code>)</li> </ul> <p>If using the placeholder details, the Inspector will try to connect to <code>http://127.0.0.1:4723/</code>. If you have a locally-running Appium server that was launched with default parameters, it should also be using this address, in which case you can leave the fields unchanged.</p>"},{"location":"session-builder/server-details/#cloud-providers","title":"Cloud Providers","text":"<p>Clicking the Select Cloud Providers button opens a screen with various cloud providers that support integration through Appium Inspector:</p> <p></p> <p>Selecting any provider then adds a new tab next to the default Appium Server tab, and switching to the provider's tab changes the available server detail fields. Different providers will have different fields - for example, LambdaTest only requires the username and access key:</p> <p></p>"},{"location":"session-builder/server-details/#advanced-settings","title":"Advanced Settings","text":"<p>The Advanced Settings options allow further configuration of the Appium server connection:</p> <p></p>"},{"location":"session-inspector/","title":"Session Inspector Overview","text":"<p>The Session Inspector is the screen shown when connected to a session, and provides the majority of the Inspector's functionality.</p> <p></p> <p>The user interface here can be divided into several groups:</p> <ul> <li>Header (buttons and more)</li> <li>The Screenshot panel</li> <li>Source tab</li> <li>Commands tab</li> <li>Gestures tab</li> <li>Recorder tab</li> <li>Session Information tab</li> </ul>"},{"location":"session-inspector/commands/","title":"Commands Tab","text":"<p>The Commands tab provides a way to execute various Appium driver commands through the Inspector GUI.</p> <p></p> <p>Most commands are grouped into various categories. Opening any category shows several buttons, each of which corresponds to an Appium driver command.</p> <p></p> <p>Note</p> <p>Commands may be driver-specific, in which case their buttons may not be visible when using other drivers.</p> <p>The available buttons may correspond to commands without parameters, and commands with parameters:</p> <ul> <li>For a command without parameters, clicking its button will execute the command</li> <li> <p>For a command with parameters, clicking its button will open the parameter popup:</p> <p></p> </li> </ul> <p>Some commands may require special conditions (e.g. they are only supported in simulators). This additional information, if present, is shown as follows:</p> <ul> <li>For a command without parameters, this is shown by hovering over the button</li> <li>For a command with parameters, this is listed inside the parameter popup</li> </ul> <p>Regardless of the command type, once it is run and its execution finishes, a new popup will show the result returned by the command.</p> <p></p> <p>Depending on the command, it may also trigger a refresh for the application screenshot and source.</p>"},{"location":"session-inspector/gestures/","title":"Gestures Tab","text":"<p>The Gestures tab allows to create, save, and execute custom gestures. By default, switching to this tab shows the Saved Gestures screen.</p> <p></p>"},{"location":"session-inspector/gestures/#saved-gestures","title":"Saved Gestures","text":"<p>The default saved gestures list is empty, but can be populated by either manually creating and saving new gestures, or importing gesture files in JSON format.</p> <ul> <li>New gestures can be created by pressing the <code>+</code> button in the bottom left, which will open the   Gesture Builder screen.</li> <li>Gesture files in JSON format can be uploaded on clicking the <code>upload icon</code>. This opens a file   browser window, allowing multiple gestures to be uploaded simultaneously.</li> </ul> <p>Once a gesture has been created and saved, hovering over its entry in the saved gestures list will show its actions as an overlay over the screenshot. There are also 4 buttons for each gesture:</p> <ul> <li>Execute the gesture</li> <li>Edit the gesture (will open it in the Gesture Builder)</li> <li>Download the gesture as a JSON file</li> <li>Delete the gesture</li> </ul>"},{"location":"session-inspector/gestures/#gesture-builder","title":"Gesture Builder","text":"<p>The gesture builder is opened when creating a new gesture, or editing an existing one.</p> <p></p> <p>Most of the Screenshot panel header buttons are disabled while the gesture builder is opened.</p> <p>The builder screen can be divided into 4 parts:</p> <ul> <li>Header</li> <li>Gesture timeline</li> <li>Pointer tabs</li> <li>Pointer actions</li> </ul>"},{"location":"session-inspector/gestures/#header","title":"Header","text":"<p>The header lists general gesture information, settings, and actions.</p> <p></p> <ul> <li>The gesture title and description can be clicked and edited</li> <li>The 2-button group allows to set the X/Y coordinate units used for Move pointer actions:   either the default relative (percentage) or absolute (pixels)</li> <li>The Play button executes the gesture</li> <li>The Save As button allows to save the gesture using the specified gesture title</li> <li>The Save button is only enabled when editing an existing gesture, and it overwrites the previously   saved gesture details with the current ones</li> </ul>"},{"location":"session-inspector/gestures/#gesture-timeline","title":"Gesture Timeline","text":"<p>When creating a new gesture, a red circle with a questionmark is shown right below the gesture description. This is the gesture timeline.</p> <p></p> <p>The default state indicates that the gesture contains one undefined action.</p> <p>The timeline can be modified by adding or modifying the pointer actions. Here is an example timeline for a simple swipe gesture:</p> <p></p> <p>These icons show that the timeline contains the following actions:</p> <ol> <li>Move to location</li> <li>Pointer down</li> <li>Move to location</li> <li>Pointer up</li> </ol>"},{"location":"session-inspector/gestures/#pointer-tabs","title":"Pointer Tabs","text":"<p>The pointer tabs show the current number of pointers used simultaneously in the gesture.</p> <p></p> <p>When creating a new gesture, only one pointer is added by default, but it is possible to have up to 5 pointers in the same gesture! Each pointer is underlined with its unique colour, and appears as a separate row in the gesture timeline.</p> <p></p> <p>The title of each pointer can also be clicked and edited.</p>"},{"location":"session-inspector/gestures/#pointer-actions","title":"Pointer Actions","text":"<p>Pointer actions are used to define the behavior of each pointer. Each individual action is presented as a rectangular card, and new cards can be freely added and removed.</p> <p></p> <p>The Action Type dropdown is used to select any of the supported actions: move, pointer down, pointer up, or pause. Each action requires different parameters.</p> <p>Valid combinations of move/pointer down/pointer up actions will automatically be reflected on the screenshot, showing the exact behavior of the gesture.</p> <p></p>"},{"location":"session-inspector/gestures/#move","title":"Move","text":"<p>The Move action is likely to be the first action in most gestures. It requires specifying the duration of the action (in milliseconds), as well as the X and Y coordinates for the target location.</p> <p>The top right corner of the card also contains an aim button - enabling this button allows to set the X and Y coordinates by simply clicking on the screenshot.</p> <p>The values for X and Y coordinates will automatically change depending on the selected units.</p>"},{"location":"session-inspector/gestures/#pointer-downpointer-up","title":"Pointer Down/Pointer Up","text":"<p>Both of these actions only require specifying whether the left or right pointer should be used. For pointer types where this does not apply (e.g. touch), the default left pointer can be used.</p>"},{"location":"session-inspector/gestures/#pause","title":"Pause","text":"<p>The Pause action only requires specifying the pause time (in milliseconds).</p>"},{"location":"session-inspector/header/","title":"Header","text":"<p>The header of the Session Inspector contains various buttons that are key to interacting with the device itself, or the application source.</p> <p></p>"},{"location":"session-inspector/header/#device-system-buttons","title":"Device System Buttons","text":"<p>If using the Inspector with an Android or iOS device, the first button group in the header will be the system buttons, which simulate the equivalent Android or iOS system functionality:</p> <p> </p> <ul> <li>Android: back / home / app switcher</li> <li>iOS: home / Siri<ul> <li>The Siri button will open a prompt for input text, which will be used as the Siri command.   Please note that the command will not work if Siri is disabled.</li> </ul> </li> </ul>"},{"location":"session-inspector/header/#context-switcher","title":"Context Switcher","text":"<p>The context switcher button group allows to change to a different application context. By default, the Inspector works in native mode, and makes no attempts to discover other contexts. Pressing the globe icon will switch to hybrid mode, and the Inspector will start the context discovery process.</p> <p>If no additional contexts are found, the button group will show a new yellow warning icon, which in turn will show this explanation upon mouseover.</p> <p></p> <p>However, if the Inspector does discover more contexts, a new dropdown will appear. There will also be a new blue icon, which will show further information upon mouseover.</p> <p></p> <p>The current context can now be switched by selecting the new context in the dropdown.</p> <p>Note</p> <p>The Inspector does not automatically switch the current context if a new one is discovered. This must be explicitly done using the dropdown.</p>"},{"location":"session-inspector/header/#toggle-automatic-source-refresh","title":"Toggle Automatic Source Refresh","text":"<p>Info</p> <p>This button is only visible when using MJPEG screenshotting capabilities like <code>appium:mjpegServerUrl</code>.</p> <p>This button allows to disable or re-enable refreshing the application XML source, when executing actions that normally trigger a refresh (these are listed in the Source tab page). While automatic refresh is disabled, the only way to refresh the source is by using the Refresh button.</p> <p>Disabling automatic refresh can be useful while interacting with the device through the screenshot, in situations when the application source is not important. If the XML source is complex and takes some time to retrieve, disabling its retrieval allows for more seamless device interaction.</p>"},{"location":"session-inspector/header/#refresh-source-screenshot","title":"Refresh Source &amp; Screenshot","text":"<p>This button triggers a manual refresh of the application screenshot and source, thereby retrieving the latest data.</p>"},{"location":"session-inspector/header/#search-for-element","title":"Search for Element","text":"<p>This button opens a new modal window, which can be used to search for elements within the current application XML source. Searching requires providing the element details:</p> <p></p> <p>There is a choice of multiple locator strategies that can be used during search. Different drivers support different locator strategies, and the Inspector will try to hide strategies that are not supported by the current driver.</p> <p>After selecting the locator strategy, entering the selector string, and pressing Search, the results screen is shown.</p> <p>If one or more elements are found, the Inspector will list the element count, time taken, and a list of selectable element IDs:</p> <p></p> <p>Selecting any element enables the element action buttons:</p> Icon Description Attempt to select the element in the application source. Note that this may not work if the element ID has changed. Tap the element Enter text to send to the element, or clear its text"},{"location":"session-inspector/header/#toggle-recorder","title":"Toggle Recorder","text":"<p>This button allows to enable or disable recording of various user interactions with the application, and translate them into code that can be used with various Appium clients.</p> <p>Interactions that can be recorded include:</p> <ul> <li>Actions for a specific element (tap/send keys/clear)</li> <li>Generic tap/swipe actions on the application screenshot</li> <li>Mobile device system actions</li> <li>Driver commands</li> </ul> <p>Note</p> <p>Recording of custom gestures is not currently supported.</p> <p>While recording is enabled, the Recorder tab contents are automatically populated with Appium client code for all supported interactions.</p>"},{"location":"session-inspector/header/#quit-session","title":"Quit Session","text":"<p>This button quits the Inspector session and returns to the Session Builder.</p>"},{"location":"session-inspector/recorder/","title":"Recorder Tab","text":"<p>The Recorder tab is used to record various Inspector interactions into executable code, for use with various Appium clients.</p> <p></p> <p>By default, the tab contents are empty, since recording must be manually enabled in the Inspector header. However, the dropdown in the top-right corner can be used in advance to select the target language for the recorded code.</p> <p>Refer to the Toggle Recorder button documentation for a list of interactions that can be recorded.</p> <p>Tip</p> <p>The Recorder tab does not need to remain opened in order to record actions.</p> <p>Once recording is enabled and a few actions are recorded, the tab contents are populated with the generated code.</p> <p></p> <p>Changing the language in this state also changes the already-recorded code to the new language.</p> <p></p> <p>There are also a few management buttons shown next to the language dropdown:</p> <p></p> <ul> <li>The boilerplate toggle button allows showing or hiding additional boilerplate code. This code is   also shown in the Session Information tab.</li> <li>The copy button copies the currently recorded code to the clipboard. If enabled, boilerplate code   is copied as well.</li> <li>The clear button deletes all the currently recorded code. Note that the recording state is not changed.</li> </ul>"},{"location":"session-inspector/screenshot/","title":"Screenshot Panel","text":"<p>The Screenshot panel is shown on the left side of the Session Inspector. It shows a screenshot of the current device screen, and also provides several ways of interacting with this screenshot.</p> <p></p>"},{"location":"session-inspector/screenshot/#supported-screenshots","title":"Supported Screenshots","text":"<p>The panel supports all screenshots regardless of dimensions, in any orientation:</p> <p></p> <p>The Inspector will try to automatically adjust how much of the window is taken up by the screenshot. Currently, the limit is either the full window height, or 40% of the window width.</p> <p>Note</p> <p>Handling of multiple screenshots (for multi-screen devices) is not currently supported.</p>"},{"location":"session-inspector/screenshot/#refreshing-the-screenshot","title":"Refreshing the Screenshot","text":"<p>By default, the screenshot itself is a static image, which is only updated when a refresh is requested, exactly like for the Source tab. Interacting with the application outside of the Inspector will not cause the screenshot to refresh.</p> <p>However, it is possible to have the screenshot update automatically, and always mirror the actual device screen, even when interacting with the device outside of the Inspector. This can be achieved by using MJPEG session capabilities, such as <code>appium:mjpegServerPort</code>.</p>"},{"location":"session-inspector/screenshot/#screenshot-panel-header","title":"Screenshot Panel Header","text":"<p>The panel header contains several interface elements that allow interacting with the screenshot in various ways.</p>"},{"location":"session-inspector/screenshot/#element-handles-toggle","title":"Element Handles Toggle","text":"<p>This switch toggles the visibility of highlighter handles for all identified elements.</p> <p>Info</p> <p>Highlighter handles are only visible in Element Mode.</p> <p></p> <p>Highlighter handles can be very useful if there are multiple elements overlapping around the same coordinates. Such element handles are merged together in a single group handle, identified by the <code>+</code> symbol. This group handle can then be clicked to reveal the individual highlighter handles, enabling the selection of each individual element.</p> <p></p>"},{"location":"session-inspector/screenshot/#interaction-mode","title":"Interaction Mode","text":"<p>The Interaction Mode buttons allow switching between the default Element Mode, and the Coordinates Mode. The differences are as follows:</p> Mode Description Element Mode In this mode, hovering over the screenshot will highlight any detected elements. Clicking on any highlighter will then select the corresponding element in the application source, and show its details in the selected element panel. Coordinates Mode In this mode, the top left corner of the screenshot will show an coordinates overlay. Hovering over the screenshot will update this overlay with the coordinates on the device screen, and clicking or swiping the screenshot will execute a tap/swipe action on the device."},{"location":"session-inspector/screenshot/#download-screenshot","title":"Download Screenshot","text":"<p>Info</p> <p>This button is not visible when using MJPEG screenshotting capabilities like <code>appium:mjpegServerUrl</code>.</p> <p>This button allows to save the currently shown screenshot to your computer as a <code>.PNG</code> file.</p>"},{"location":"session-inspector/session-info/","title":"Session Information Tab","text":"<p>The Session Information tab can be used as a reference for the current state of the session.</p> <p></p> <p>It can be divided into two parts: the informational tables at the top, and the session boilerplate at the bottom.</p>"},{"location":"session-inspector/session-info/#informational-tables","title":"Informational Tables","text":"<p>These tables provide general information about the session, such as its URL, server details, capabilities, and so on. The Server Details and Session Details sub-tables can be scrolled for further information.</p>"},{"location":"session-inspector/session-info/#session-boilerplate","title":"Session Boilerplate","text":"<p>This codeblock provides example boilerplate code that can be used to create a session with the currently used server and session details. It includes all the necessary imports, setup, and teardown for creating a session in a single, self-contained file.</p> <p>The copy button in the top-right corner can be used to copy the code to the clipboard, whereas the dropdown can be used to change the target language.</p>"},{"location":"session-inspector/source/","title":"Source Tab","text":"<p>The Source tab is the default tab opened after starting an Inspector session. It can be divided into two connected parts: the Application Source panel, and the Selected Element panel.</p> <p></p> <p>The divider line in the middle of the tab can be used to adjust the widths of both halves of this tab, as well as collapse/expand them.</p>"},{"location":"session-inspector/source/#application-source","title":"Application Source","text":"<p>The Application Source is the central panel of the Source Tab, and shows the application source XML in a tree-like structure.</p> <p></p> <p>The panel can be divided into 3 parts: header buttons, source actions, and the source tree.</p>"},{"location":"session-inspector/source/#source-header-buttons","title":"Source Header Buttons","text":"Icon Description Copy the application XML to the clipboard Download the source as an <code>.xml</code> file"},{"location":"session-inspector/source/#source-action-buttons","title":"Source Action Buttons","text":"Icon Description Collapse all nodes in the source tree Toggle all non-'important' element attributes Perform a plaintext search in the source XML"},{"location":"session-inspector/source/#source-tree","title":"Source Tree","text":"<p>The application source tree is generated from the XML data returned by the Appium driver. By default, the tree only shows the class name for each element entry, along with several 'important' attributes such as <code>value</code> and <code>content-desc</code>. All non-'important' attributes are hidden by default for ease of navigation, but can be revealed with the Toggle Attributes button.</p> <p>All elements in the XML tree are interactable, and clicking on one causes 3 actions:</p> <ul> <li>The element entry in the XML tree is highlighted</li> <li>The element highlighter appears in the Screenshot panel (if   Element Mode is selected)</li> <li>The element details are shown in the Selected Element panel</li> </ul> <p>Elements that have one or more child elements have an arrow on their left side, which can be clicked to toggle visibility of such child elements.</p> <p>For supported Appium drivers, the maximum depth of the returned XML tree can be adjusted with the <code>snapshotMaxDepth</code> setting.</p>"},{"location":"session-inspector/source/#refreshing-the-source","title":"Refreshing the Source","text":"<p>By default, the source XML is only updated when a refresh is requested. This can happen when:</p> <ul> <li>interacting with an element (tap/send keys/clear)</li> <li>interacting with the screenshot (tap/swipe)</li> <li>simulating system actions</li> <li>executing driver commands (depends on the command)</li> <li>executing custom gestures</li> <li>pressing the Refresh button</li> </ul> <p>Note that interacting with the application outside of the Inspector will not cause the source XML to refresh.</p> <p>The use of MJPEG session capabilities (such as <code>appium:mjpegServerPort</code>) allows to modify this behavior. While the default source refresh behavior in MJPEG mode stays the same, the mode adds the automatic source refresh button in the application header, which allows to disable automatic refreshing.</p>"},{"location":"session-inspector/source/#selected-element","title":"Selected Element","text":"<p>The Selected Element panel is shown on the right side of the Source tab. It is empty by default, but becomes populated once an element is selected.</p> <p></p> <p>In order to populate the panel, an element can be selected in one of the following ways:</p> <ul> <li>Selecting an entry in the Application Source</li> <li>Selecting a highlighter in the Screenshot panel</li> <li>Clicking the Reveal Element in Source button in the Search Results</li> </ul> <p>The panel can be divided into 4 parts: header buttons, element action buttons, suggested locators, and element attributes.</p>"},{"location":"session-inspector/source/#element-header-buttons","title":"Element Header Buttons","text":"Icon Description Copy the element attributes to the clipboard as an array of JSON objects Download a screenshot of the element as a <code>.PNG</code> file"},{"location":"session-inspector/source/#element-action-buttons","title":"Element Action Buttons","text":"Icon Description Tap the element Enter text to send to the element, or clear its text Run a timing comparison for the suggested element locators"},{"location":"session-inspector/source/#suggested-locators","title":"Suggested Locators","text":"<p>This table lists one or more locator strategies + selectors that can be used to find the element. Clicking on a selector copies it to the clipboard.</p> <p>Pressing the timing comparison button executes a search for each of the listed strategies + locators, and adds a new table column with the elapsed time until the element was returned.</p> <p></p>"},{"location":"session-inspector/source/#element-attributes","title":"Element Attributes","text":"<p>This table lists all attributes retrieved from the element, along with their values. Clicking on a value copies it to the clipboard.</p> <p>Refer to your Appium driver documentation for ways to customize the attributes shown in this table.</p>"}]}